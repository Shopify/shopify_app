<h1 class="green">Welcome</h1>

<p>
  This is an example Shopify application that shows what you can do with the Shopify API.
</p>

<div class="info" style="clear: both">
  This will send the <strong>API-Key</strong> and <strong>Secret</strong> to a shop, and make sure that you have the rights to 
  access its private admin data.<br/>
  After authenticating, you will be redirected to the <code>show</code> action of your <code>SessionsController</code>, which stores the session, and then redirects you to your example dashboard.<br/>
  Your <code>HomeController</code> will get your recent <code>Orders</code> and <code>Articles</code> through the 
  Shopify <%= link_to 'REST', 'http://www.xfront.com/REST-Web-Services.html', :title => "Get more information about REST web services in general" %> API and list them with all of your <code>Products</code>.
  You can click on a link of one of your objects and will then be taken to the corresponding admin area of your shop.<br/>

  <p><strong>Note:</strong> There are no examples for <em>creating or editing</em> objects, but you are also able to do that with the Shopify API!</p>
</div>

<h3>1. Make sure you've entered a valid <em>API-Key</em> and <em>Secret</em></h3>

<ul style="list-style-type: lower-alpha;">
  <li>
    <p>
      If you haven't registered your application yet, then enter your shop's <strong>URL</strong> or <strong>subdomain</strong> here:<br/>
    </p>
    
    <div class="box grey" style="width: 500px;text-align: center">
      <script type="text/javascript" charset="utf-8">
        function getApiUrl() {
          var name = $('shop').value; 
          if (name.indexOf('.') == -1) {
            var api_url = name + '.myshopify.com';
          } else {
            var api_url = name.replace(/^https?:\/\//, ''); // Remove the "http://"
          }
          api_url = api_url.replace(/\/$/, ''); // Trim trailing slashes
          $('api-form').action = 'http://' + api_url + '/admin/api_clients/new';
        }
      </script>
      
      <% form_tag '', :method => 'get', :id => 'api-form', :onsubmit => "getApiUrl(); return true;", :style => 'margin-left: 16px;' do %>
        <%= text_field_tag 'shop', '', :size => 40 %>
        <%= hidden_field_tag 'api_client[return_url]', @callback_url %>
        <%= submit_tag 'Get API key' %>
      <% end %>
    </div>

    <p>
      After registering your application with Shopify, you need to edit the <code>config/shopify.yml</code> file,
      and insert your <em>API-Key</em> and <em>Secret</em> there. Then restart this application.
    </p>
  </li>
  <li>
    <p><strong>If you've already supplied those to the generator</strong>, then move on to <%= link_to 'Step #2', '#callback-step' %>.</p>
  </li>
</ul>

<h3 id="callback-step">2. Make sure your <em>callback URL</em> is correct</h3>

The URL should be <code><%= @callback_url %></code>, 
with the host portion of the URL pointing to whichever domain is currently hosting this application. <br/> 
The callback URL of your app can be changed in the API screen of your Shopify admin interface.

<h3>3. <%= link_to 'Login', '/login' %> to your shop</h3>

<div class="border-wrap">
  <div class="info">
    This will send the <strong>API-Key</strong> and <strong>Secret</strong> to a shop, and make sure that you have the rights to 
    access its private admin data.<br/>
    After authenticating, you will be redirected to the <code>show</code> action of your <code>SessionsController</code>, which stores the session, and then redirects you to your example dashboard.<br/>
    Your <code>HomeController</code> will get your recent <code>Orders</code> and <code>Articles</code> through the 
    Shopify <%= link_to 'REST', 'http://www.xfront.com/REST-Web-Services.html', :title => "Get more information about REST web services in general" %> API and list them with all of your <code>Products</code>.
    You can click on a link of one of your objects and will then be taken to the corresponding admin area of your shop.<br/>
    
    <p><strong>Note:</strong> There are no examples for <em>creating or editing</em> objects, but you are also able to do that with the Shopify API!</p>
  </div>
</div>

<h3>4. Check out the source code of the <code>home_controller</code> and its <code>index</code> template</h3>

<p class="description">
  You can analyze those files to see how the ShopifyAPI is used and get a glimpse of what's possible.
</p>

<h3>5. Read additional documentation</h3>

<p class="description">
  Become an expert.
</p>

<ul>
  <li>
    <%= link_to 'API documentation', 'http://www.shopify.com/developers/api' %>
    <span class="hint">(An overview of what you can do with the Shopify API.)
  </li>
  <li>
    <%= link_to 'Wiki (needs its own API section)', 'http://wiki.shopify.com/' %>
    <span class="hint">(Get more information and share your knowledge.)
  </li>
  <li>
    <%= link_to 'Forum (needs its own API section)', 'http://forums.shopify.com/community' %>
    <span class="hint">(Ask questions and see what others already wanted to know.)
  </li>
</ul>

<h3>6. Publish your application</h3>

<p class="description">
  This feature is not implemented yet, but it in the future it will allow you to register your application, 
  so that will be shown in a public directory with a description, so that more users will take notice of it.
</p>